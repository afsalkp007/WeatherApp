//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `CloudCoverFilled`.
    static let cloudCoverFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "CloudCoverFilled")
    /// Image `HumidityFilled`.
    static let humidityFilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "HumidityFilled")
    /// Image `Temperature`.
    static let temperature = Rswift.ImageResource(bundle: R.hostingBundle, name: "Temperature")
    /// Image `WindSpeed`.
    static let windSpeed = Rswift.ImageResource(bundle: R.hostingBundle, name: "WindSpeed")
    /// Image `notFound`.
    static let notFound = Rswift.ImageResource(bundle: R.hostingBundle, name: "notFound")
    
    /// `UIImage(named: "CloudCoverFilled", bundle: ..., traitCollection: ...)`
    static func cloudCoverFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cloudCoverFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HumidityFilled", bundle: ..., traitCollection: ...)`
    static func humidityFilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.humidityFilled, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Temperature", bundle: ..., traitCollection: ...)`
    static func temperature(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.temperature, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "WindSpeed", bundle: ..., traitCollection: ...)`
    static func windSpeed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.windSpeed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "notFound", bundle: ..., traitCollection: ...)`
    static func notFound(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.notFound, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ListCell`.
    static let listCell = _R.nib._ListCell()
    
    /// `UINib(name: "ListCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.listCell) instead")
    static func listCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.listCell)
    }
    
    static func listCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
      return R.nib.listCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ListCell`.
    static let listCell: Rswift.ReuseIdentifier<ListCell> = Rswift.ReuseIdentifier(identifier: "ListCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: Imperial
      /// 
      /// Locales: en
      static let imperial = Rswift.StringResource(key: "imperial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Metric
      /// 
      /// Locales: en
      static let metric = Rswift.StringResource(key: "metric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: km
      /// 
      /// Locales: en
      static let km = Rswift.StringResource(key: "km", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: km/h
      /// 
      /// Locales: en
      static let kph = Rswift.StringResource(key: "kph", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: mi
      /// 
      /// Locales: en
      static let mi = Rswift.StringResource(key: "mi", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: mp/h
      /// 
      /// Locales: en
      static let mph = Rswift.StringResource(key: "mph", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Imperial
      /// 
      /// Locales: en
      static func imperial(_: Void = ()) -> String {
        return NSLocalizedString("imperial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Metric
      /// 
      /// Locales: en
      static func metric(_: Void = ()) -> String {
        return NSLocalizedString("metric", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: km
      /// 
      /// Locales: en
      static func km(_: Void = ()) -> String {
        return NSLocalizedString("km", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: km/h
      /// 
      /// Locales: en
      static func kph(_: Void = ()) -> String {
        return NSLocalizedString("kph", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: mi
      /// 
      /// Locales: en
      static func mi(_: Void = ()) -> String {
        return NSLocalizedString("mi", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: mp/h
      /// 
      /// Locales: en
      static func mph(_: Void = ()) -> String {
        return NSLocalizedString("mph", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ListCell.validate()
    }
    
    struct _ListCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ListCell
      
      let bundle = R.hostingBundle
      let identifier = "ListCell"
      let name = "ListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CloudCoverFilled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CloudCoverFilled' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HumidityFilled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HumidityFilled' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Temperature", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Temperature' is used in nib 'ListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "WindSpeed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'WindSpeed' is used in nib 'ListCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ListViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
